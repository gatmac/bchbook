[[ch03_bitcoin_client]]
== Bitcoin Cash Node: The Reference Implementation

((("open source licenses")))((("Nakamoto, Satoshi")))Bitcoin Cash Node is an _open source_ project and the source code is available under an open (MIT) license, free to download and use for any purpose. Open source means more than simply free to use. It also means that bitcoin is developed by an open community of volunteers. At first, that community consisted of only Satoshi Nakamoto. By 2016, bitcoin's source code had more than 400 contributors with about a dozen developers working on the code almost full-time and several dozen more on a part-time basis. Anyone can contribute to the code&#x2014;including you!


((("bitcoin whitepaper")))((("Satoshi client")))((("reference implementation", see="Bitcoin Cash Node")))((("Bitcoin Cash Node", "reference implementation")))When bitcoin was created by Satoshi Nakamoto, the software was actually completed before the whitepaper reproduced in <<satoshi_whitepaper>> was written. Satoshi wanted to make sure it worked before writing about it. That first implementation, then simply known as "Bitcoin" or "Satoshi client," has been heavily modified and improved. It has evolved into what is known as _Bitcoin Cash Node_, and is forked from _Bitcoin Core_ after the hardfork of Bitcoin Cash from Bitcon Core. Bitcoin Cash Node is the _reference implementation_ of the Bitcoin system, meaning that it is the authoritative reference on how each part of the technology should be implemented. Is can also be relied on to support the latest features of Cash for mining and validating new blocks. Bitcoin Cash Node implements all aspects of bitcoin, including wallets, a transaction and block validation engine, and a full network node in the peer-to-peer Bitcoin network.

[WARNING]
====
((("wallets", "best practices for")))((("bitcoin improvement proposals", "Mnemonic Code Words (BIP-39)")))((("bitcoin improvement proposals", "Hierarchical Deterministic Wallets (BIP-32/BIP-44)")))Even though Bitcoin Cash Node includes a reference implementation of a wallet, this is not intended to be used as a production wallet for users or for applications. Application developers are advised to build wallets using modern standards such as BIP-39 and BIP-32 (see <<mnemonic_code_words>> and <<hd_wallets>>). BIP stands for _Bitcoin Improvement Proposal_.
====

<<bitcoin_core_architecture>> shows the architecture of Bitcoin Core and Bitcoin Cash Node.((("Bitcoin Cash Node", "architecture")))

[[bitcoin_core_architecture]]
.Bitcoin Cash Node architecture (Source: Eric Lombrozo)
image::images/mbch1_0301.png["Bitcoin Cash Node Architecture"]


=== Bitcoin Development Environment

((("development environment", "setup", see="Bitcoin Cash Node")))If you're a developer, you will want to set up a development environment with all the tools, libraries, and support software for writing bitcoin applications. In this highly technical chapter, we'll walk through that process step-by-step. If the material becomes too dense (and you're not actually setting up a development environment) feel free to skip to the next chapter, which is less technical.

[[compiling_core]]
=== Compiling Bitcoin Cash Node from the Source Code

((("Bitcoin Cash Node", "compiling from source code", id="BCsource03")))((("Bitcoin Cash Node", "compiling from source code", "downloading")))((("code examples, obtaining and using")))Bitcoin Cash Node's source code can be downloaded as an archive or by cloning the authoritative source repository from GitLab.  ((("Bitcoin Cash Node downloads")))On the https://bitcoincashnode.org/en/download.html[Bitcoin Cash Node download page], select the most recent version and download the compressed archive of the source code, e.g., +bitcoin-cash-node-26.1.0-x86_64-linux-gnu.tar.gz+. ((("GitHub bitcoin page")))Alternatively, use the git command line to create a local copy of the source code from the https://gitlab.com/bitcoin-cash-node/bitcoin-cash-node[GitLab Bitcoin Cash Node page].

[TIP]
====
((("$ symbol")))((("shell commands")))((("terminal applications")))In many of the examples in this chapter we will be using the operating system's command-line interface (also known as a "shell"), accessed via a "terminal" application. The shell will display a prompt; you type a command; and the shell responds with some text and a new prompt for your next command. The prompt may look different on your system, but in the following examples it is denoted by a +$+ symbol. In the examples, when you see text after a +$+ symbol, don't type the +$+ symbol but type the command immediately following it, then press Enter to execute the command. In the examples, the lines below each command are the operating system's responses to that command. When you see the next +$+ prefix, you'll know it's a new command and you should repeat the process.
====

((("cloning source code")))((("source code, cloning", seealso="Bitcoin Cash Node")))In this example, we are using the +git+ command to create a local copy ("clone") of the source code:

----
$ git clone https://gitlab.com/bitcoin-cash-node/bitcoin-cash-node.git
Cloning into 'bitcoin-cash-node'...
remote: Enumerating objects: 135840, done.
remote: Counting objects: 100% (1124/1124), done.
remote: Compressing objects: 100% (548/548), done.
remote: Total 135840 (delta 587), reused 1039 (delta 573), pack-reused 134716
Receiving objects: 100% (135840/135840), 117.63 MiB | 27.82 MiB/s, done.
Resolving deltas: 100% (107190/107190), done.
$
----

[TIP]
====
((("distributed version control systems")))Git is the most widely used distributed version control system, an essential part of any software developer's toolkit. You may need to install the +git+ command (_sudo apt install git_), or a graphical user interface for git, on your operating system if you do not have it already.
====

When the git cloning operation has completed, you will have a complete local copy of the source code repository in the directory _bitcoin-cash-node_. Change to this directory by typing ++cd bitcoin-cash-node++ at the prompt:

----
$ cd bitcoin-cash-node/
----

==== Selecting a Bitcoin Cash Node Release
((("Bitcoin Cash Node", "compiling from source code", "version selection")))By default, the local copy will be synchronized with the most recent code, which might be an unstable or beta version of bitcoin. Before compiling the code, select a specific version by checking out a release _tag_. This will synchronize the local copy with a specific snapshot of the code repository identified by a keyword tag. Tags are used by the developers to mark specific releases of the code by version number. First, to find the available tags, we use the +git tag+ command:

----
$ git tag
v0.21.0
v0.21.1
v0.21.2
v22.0.0
v22.1.0
v22.2.0
v23.0.0
v23.1.0
v24.0.0
v24.1.0
v25.0.0
v26.0.0
v26.1.0
$ 
----

The list of tags shows all the released versions of Bitcoin Cash. By convention, From the preceding list, select the highest version release, which at the time of writing was v27.0.0. To synchronize the local code with this version, use the +git checkout+ command:

----
$ git checkout v26.1.0
Note: switching to 'v26.1.0'.
HEAD is now at 44591e2a2 Merge branch 'doc/release_notes_26_1_0' into 'master'
----

You can confirm you have the desired version "checked out" by issuing the command +git status+:

----
$ git status
HEAD detached at v26.1.0
nothing to commit, working tree clean
----

==== Configuring the Bitcoin Cash Node Build

((("Bitcoin Cash Node", "compiling from source code", "build configuration")))((("documentation")))((("build documentation", seealso="Bitcoin Cash Node")))The source code includes documentation, which can be found in a number of files. Review the main documentation located in _README.md_ in the _bitcoin_ directory by typing ++**more README.md**++ at the prompt and using the spacebar to progress to the next page. In this chapter, we will build the command-line Bitcoin client, also known as +bitcoind+ on Linux. Review the instructions for compiling the +bitcoind+ command-line client on your platform by typing ++**more doc/build-arch.md**++, ++**more doc/build-deb.md**++, or ++**more doc/build-rpm.md**++. Alternative instructions for macOS and Windows can be found in the _doc_ directory, as _build-osx.md_ or _build-windows.md_, respectively.

Carefully review the build prerequisites, which are in the first part of the build documentation. These are libraries that must be present on your system before you can begin to compile bitcoin. If these prerequisites are missing, the build process will fail with an error. If this happens because you missed a prerequisite, you can install it and then resume the build process from where you left off.

In our example, we are using Ubuntu 22.04 LTS. 

----
$ sudo apt-get install build-essential cmake git libboost-chrono-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libevent-dev libminiupnpc-dev libssl-dev libzmq3-dev help2man ninja-build python3
[sudo] password for gatmac: 
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
git is already the newest version (1:2.34.1-1ubuntu1.9).
python3 is already the newest version (3.10.6-1~22.04).
python3 set to manually installed.
The following additional packages will be installed:
  cmake-data comerr-dev dh-elpa-helper icu-devtools krb5-multidev libboost-atomic1.74-dev libboost-atomic1.74.0 libboost-chrono1.74-dev libboost-chrono1.74.0
  libboost-date-time1.74-dev libboost-date-time1.74.0 libboost-filesystem1.74-dev libboost-serialization1.74-dev libboost-serialization1.74.0 libboost-system1.74-dev
  libboost-system1.74.0 libboost-test1.74-dev libboost-test1.74.0 libboost-thread1.74-dev libboost1.74-dev libbsd-dev libevent-core-2.1-7 libevent-extra-2.1-7
  libevent-openssl-2.1-7 libevent-pthreads-2.1-7 libgssrpc4 libicu-dev libjsoncpp25 libkadm5clnt-mit12 libkadm5srv-mit12 libkdb5-10 libkrb5-dev libmd-dev libnorm-dev
  libpgm-dev librhash0 libsodium-dev libxml2-dev
Suggested packages:
  cmake-doc cmake-format doc-base krb5-doc libboost1.74-doc libboost-container1.74-dev libboost-context1.74-dev libboost-contract1.74-dev libboost-coroutine1.74-dev
  libboost-exception1.74-dev libboost-fiber1.74-dev libboost-graph1.74-dev libboost-graph-parallel1.74-dev libboost-iostreams1.74-dev libboost-locale1.74-dev
  libboost-log1.74-dev libboost-math1.74-dev libboost-mpi1.74-dev libboost-mpi-python1.74-dev libboost-numpy1.74-dev libboost-program-options1.74-dev
  libboost-python1.74-dev libboost-random1.74-dev libboost-regex1.74-dev libboost-stacktrace1.74-dev libboost-timer1.74-dev libboost-type-erasure1.74-dev
  libboost-wave1.74-dev libboost1.74-tools-dev libmpfrc++-dev libntl-dev libboost-nowide1.74-dev krb5-user icu-doc libnorm-doc libssl-doc
The following NEW packages will be installed:
  build-essential cmake cmake-data comerr-dev dh-elpa-helper help2man icu-devtools krb5-multidev libboost-atomic1.74-dev libboost-atomic1.74.0 libboost-chrono-dev
  libboost-chrono1.74-dev libboost-chrono1.74.0 libboost-date-time1.74-dev libboost-date-time1.74.0 libboost-filesystem-dev libboost-filesystem1.74-dev
  libboost-serialization1.74-dev libboost-serialization1.74.0 libboost-system1.74-dev libboost-system1.74.0 libboost-test-dev libboost-test1.74-dev libboost-test1.74.0
  libboost-thread-dev libboost-thread1.74-dev libboost1.74-dev libbsd-dev libevent-core-2.1-7 libevent-dev libevent-extra-2.1-7 libevent-openssl-2.1-7
  libevent-pthreads-2.1-7 libgssrpc4 libicu-dev libjsoncpp25 libkadm5clnt-mit12 libkadm5srv-mit12 libkdb5-10 libkrb5-dev libmd-dev libminiupnpc-dev libnorm-dev
  libpgm-dev librhash0 libsodium-dev libssl-dev libxml2-dev libzmq3-dev ninja-build
0 upgraded, 50 newly installed, 0 to remove and 9 not upgraded.
Need to get 38.5 MB of archives.
After this operation, 288 MB of additional disk space will be used.
Do you want to continue? [Y/n] 
Get:1 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 build-essential amd64 12.9ubuntu3 [4,744 B]
Get:2 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libjsoncpp25 amd64 1.9.5-3 [80.0 kB]
[...]
----

BCHN also required Berkeley DB 5.3. 

----
$ sudo apt-get install libdb-dev libdb++-dev
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
The following additional packages will be installed:
  libdb5.3++ libdb5.3++-dev libdb5.3-dev
Suggested packages:
  db5.3-doc
The following NEW packages will be installed:
  libdb++-dev libdb-dev libdb5.3++ libdb5.3++-dev libdb5.3-dev
0 upgraded, 5 newly installed, 0 to remove and 9 not upgraded.
Need to get 2,444 kB of archives.
After this operation, 8,463 kB of additional disk space will be used.
Do you want to continue? [Y/n] 
Get:1 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libdb5.3++ amd64 5.3.28+dfsg1-0.8ubuntu3 [757 kB]
Get:2 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libdb5.3-dev amd64 5.3.28+dfsg1-0.8ubuntu3 [830 kB]
Get:3 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libdb5.3++-dev amd64 5.3.28+dfsg1-0.8ubuntu3 [853 kB]
Get:4 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libdb++-dev amd64 1:5.3.21~exp1ubuntu4 [2,286 B]
Get:5 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libdb-dev amd64 1:5.3.21~exp1ubuntu4 [2,236 B]
Fetched 2,444 kB in 2s (1,423 kB/s)   
Selecting previously unselected package libdb5.3++:amd64.
(Reading database ... 294041 files and directories currently installed.)
Preparing to unpack .../libdb5.3++_5.3.28+dfsg1-0.8ubuntu3_amd64.deb ...
Unpacking libdb5.3++:amd64 (5.3.28+dfsg1-0.8ubuntu3) ...
Selecting previously unselected package libdb5.3-dev.
Preparing to unpack .../libdb5.3-dev_5.3.28+dfsg1-0.8ubuntu3_amd64.deb ...
Unpacking libdb5.3-dev (5.3.28+dfsg1-0.8ubuntu3) ...
Selecting previously unselected package libdb5.3++-dev.
Preparing to unpack .../libdb5.3++-dev_5.3.28+dfsg1-0.8ubuntu3_amd64.deb ...
Unpacking libdb5.3++-dev (5.3.28+dfsg1-0.8ubuntu3) ...
Selecting previously unselected package libdb++-dev:amd64.
Preparing to unpack .../libdb++-dev_1%3a5.3.21~exp1ubuntu4_amd64.deb ...
Unpacking libdb++-dev:amd64 (1:5.3.21~exp1ubuntu4) ...
Selecting previously unselected package libdb-dev:amd64.
Preparing to unpack .../libdb-dev_1%3a5.3.21~exp1ubuntu4_amd64.deb ...
Unpacking libdb-dev:amd64 (1:5.3.21~exp1ubuntu4) ...
Setting up libdb5.3++:amd64 (5.3.28+dfsg1-0.8ubuntu3) ...
Setting up libdb5.3-dev (5.3.28+dfsg1-0.8ubuntu3) ...
Setting up libdb5.3++-dev (5.3.28+dfsg1-0.8ubuntu3) ...
Setting up libdb-dev:amd64 (1:5.3.21~exp1ubuntu4) ...
Setting up libdb++-dev:amd64 (1:5.3.21~exp1ubuntu4) ...
Processing triggers for libc-bin (2.35-0ubuntu3.1) ...
[...]
----

This example is using Ubuntu workstation, so we will also configure the GUI, _bitcoin-qt_. 

----
$ sudo apt-get install libqrencode-dev libprotobuf-dev protobuf-compiler qttools5-dev
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
libprotobuf-dev is already the newest version (3.12.4-1ubuntu7.22.04.1).
libprotobuf-dev set to manually installed.
protobuf-compiler is already the newest version (3.12.4-1ubuntu7.22.04.1).
The following additional packages will be installed:
  libclang1-14 libegl-dev libgl-dev libglu1-mesa-dev libglx-dev libllvm14 libpthread-stubs0-dev libqt5concurrent5 libqt5designer5 libqt5designercomponents5 libqt5help5
  libqt5opengl5 libqt5opengl5-dev libqt5positioning5 libqt5printsupport5 libqt5quickwidgets5 libqt5sensors5 libqt5sql5 libqt5sql5-sqlite libqt5test5 libqt5webchannel5
  libqt5webkit5 libqt5xml5 libvulkan-dev libx11-dev libxau-dev libxcb1-dev libxdmcp-dev libxext-dev qdoc-qt5 qhelpgenerator-qt5 qt5-assistant qt5-qmake qt5-qmake-bin
  qtattributionsscanner-qt5 qtbase5-dev qtbase5-dev-tools qtchooser qttools5-dev-tools x11proto-dev xorg-sgml-doctools xtrans-dev
Suggested packages:
  libx11-doc libxcb-doc libxext-doc qt5-doc default-libmysqlclient-dev firebird-dev libpq-dev libsqlite3-dev unixodbc-dev
The following NEW packages will be installed:
  libclang1-14 libegl-dev libgl-dev libglu1-mesa-dev libglx-dev libllvm14 libpthread-stubs0-dev libqrencode-dev libqt5concurrent5 libqt5designer5
  libqt5designercomponents5 libqt5help5 libqt5opengl5 libqt5opengl5-dev libqt5positioning5 libqt5printsupport5 libqt5quickwidgets5 libqt5sensors5 libqt5sql5
  libqt5sql5-sqlite libqt5test5 libqt5webchannel5 libqt5webkit5 libqt5xml5 libvulkan-dev libx11-dev libxau-dev libxcb1-dev libxdmcp-dev libxext-dev qdoc-qt5
  qhelpgenerator-qt5 qt5-assistant qt5-qmake qt5-qmake-bin qtattributionsscanner-qt5 qtbase5-dev qtbase5-dev-tools qtchooser qttools5-dev qttools5-dev-tools
  x11proto-dev xorg-sgml-doctools xtrans-dev
0 upgraded, 44 newly installed, 0 to remove and 9 not upgraded.
Need to get 57.3 MB of archives.
After this operation, 261 MB of additional disk space will be used.
Do you want to continue? [Y/n] 
Get:1 http://us.archive.ubuntu.com/ubuntu jammy/universe amd64 libqt5positioning5 amd64 5.15.3+dfsg-3 [223 kB]
Get:2 http://us.archive.ubuntu.com/ubuntu jammy-updates/universe amd64 libqt5printsupport5 amd64 5.15.3+dfsg-2ubuntu0.2 [214 kB]
[...]
----

Assuming the prerequisites are installed, you start the build process.

----
$ cd bitcoin-cash-node/
$ mkdir build261
$ cd build261
$ cmake -GNinja ..
----

The _cmake -GNinja_ script creates a set of automatic configuration scripts that will interrogate your system to discover the correct settings and ensure you have all the necessary libraries to compile the code. To build just the node, no wallet functionality, in our Ubuntu 22.04 LTS example, we would choose this:

----
cmake -GNinja .. -DBUILD_BITCOIN_WALLET=OFF -DBUILD_BITCOIN_QT=OFF
----

To build the node, with wallet functionality, but without GUI, in our Ubuntu 22.04 LTS example we would choose this:

----
cmake -GNinja .. -DBUILD_BITCOIN_QT=OFF
----

If all went well, the +cmake -GNinja+ command will end by creating the customized build scripts that will allow us to compile +bitcoind+. If there are any missing libraries or errors, the +configure+ command will terminate with an error instead of creating the build scripts. If an error occurs, it is most likely because of a missing or incompatible library. Review the build documentation again and make sure you install the missing prerequisites. Then run +cmake+ again and see if that fixes the error. In our Ubuntu 22.04 LTS example, let's see what that generated. 

----
$ ls -F
build.ninja  CMakeCache.txt  CMakeFiles/  cmake_install.cmake  config/  contrib/  CPackConfig.cmake  CPackSourceConfig.cmake  doc/  src/  test/
----

==== Building the Bitcoin Cash Node Executables

((("Bitcoin Cash Node", "compiling from source code", "core executables")))((("core executables", seealso="Bitcoin Cash Node")))Next, you will compile the source code, a process that can take up to an hour to complete, depending on the speed of your CPU and available memory. During the compilation process you should see output every few seconds or every few minutes, or an error if something goes wrong. If an error occurs, or the compilation process is interrupted, it can be resumed any time by typing +make+ again. Type ++**make**++ to start compiling the executable application:

----
$ ninja
[0/430] Preparing native build...
-- The C compiler identification is GNU 11.3.0
-- The CXX compiler identification is GNU 11.3.0
[... many more compilation messages follow ...]
$
----

If all goes well, Bitcoin Cash Node is now compiled. You should run the unit test suite with +ninja check+ to ensure the linked libraries are not broken in obvious ways. In our Ubuntu 22.04 LTS example, let's see what was buiilt. 

----
$ ls -F src/
bench/        bitcoin-tx*      cmake_install.cmake  leveldb/                 libbitcoinconsensus.so.26@      librpcclient.a  libutil.a  secp256k1/  univalue/
bitcoin-cli*  bitcoin-wallet*  config/              libbitcoinconsensus.a    libbitcoinconsensus.so.26.0.0*  libscript.a     obj/       seeder/     wallet/
bitcoind*     CMakeFiles/      crypto/              libbitcoinconsensus.so@  libcommon.a                     libserver.a     qt/        test/       zmq/
----

There are four executable files in the _src_ folder: _bitcoin-tx_, _bitcoin-cli_, _bitcoin-wallet_, and _bitcoind_. In addition, there is _bitcoin-qt_ in the _src/qt_ folder. 

The final step is to install the various executables on your system using the +make install+ command. You may be prompted for your user password, because this step requires administrative privileges:

----
$ sudo ninja install
[sudo] password for gatmac: 
[0/1] Install the project...
-- Install configuration: "RelWithDebInfo"
-- Installing: /usr/local/lib/libbitcoinconsensus.so.26.0.0
-- Installing: /usr/local/lib/libbitcoinconsensus.so.26
-- Installing: /usr/local/lib/libbitcoinconsensus.so
-- Installing: /usr/local/include/bitcoinconsensus.h
-- Installing: /usr/local/bin/bitcoin-wallet
-- Installing: /usr/local/bin/bitcoin-cli
-- Installing: /usr/local/bin/bitcoin-tx
-- Installing: /usr/local/bin/bitcoind
-- Installing: /usr/local/lib/libsecp256k1.a
-- Installing: /usr/local/include/secp256k1.h
-- Installing: /usr/local/include/secp256k1_preallocated.h
-- Installing: /usr/local/include/secp256k1_multiset.h
-- Installing: /usr/local/include/secp256k1_recovery.h
-- Installing: /usr/local/include/secp256k1_schnorr.h
-- Installing: /usr/local/bin/bitcoin-seeder
-- Installing: /usr/local/bin/bitcoin-qt
-- Installing: /usr/local/share/man/man1/bitcoind.1
-- Installing: /usr/local/share/man/man1/bitcoin-qt.1
-- Installing: /usr/local/share/man/man1/bitcoin-cli.1
-- Installing: /usr/local/share/man/man1/bitcoin-tx.1
-- Installing: /usr/local/share/man/man1/bitcoin-seeder.1
$
----

((("", startref="BCsource03")))The default installation of +bitcoind+ puts it in _/usr/local/bin_. You can confirm that Bitcoin Cash Node is correctly installed by asking the system for the path of the executables, as follows:

----
$ which bitcoind
/usr/local/bin/bitcoind

$ which bitcoin-cli
/usr/local/bin/bitcoin-cli
----

=== Running a Bitcoin Cash Node Node

((("Bitcoin Cash Node", "running core nodes", id="BCnode03")))((("Bitcoin nodes", "running core nodes", id="BNcore03")))Bitcoin's peer-to-peer network is composed of network "nodes," run mostly by volunteers and some of the businesses that build bitcoin applications. Those running Bitcoin nodes have a direct and authoritative view of the Bitcoin blockchain, with a local copy of all the transactions, independently validated by their own system. By running a node, you don't have to rely on any third party to validate a transaction. Moreover, by running a Bitcoin node you contribute to the Bitcoin network by making it more robust.

Running a node, however, requires a permanently connected system with enough resources to process all bitcoin transactions. Depending on whether you choose to index all transactions and keep a full copy of the blockchain, you may also need a lot of disk space and RAM. As of the middle of 2023, a full-index node needs 4-8 GB of RAM and a minimum of 200 GB of disk space (see https://blockchair.com/bitcoin-cash/charts/blockchain-size[]). Bitcoin nodes also transmit and receive bitcoin transactions and blocks, consuming internet bandwidth, but modern broadband connections should not be a constraint. If your internet connection is limited, has a low data cap, or is metered (charged by the gigabit), you should probably not run a Bitcoin node on it, or run it in a way that constrains its bandwidth (see <<constrained_resources>>).

[TIP]
====
((("warnings and cautions", "core node resource requirements")))((("resource requirements")))Bitcoin Cash Node keeps a full copy of the blockchain by default, with every transaction that has ever occurred on the Bitcoin network since its inception in 2009. This dataset is dozens of gigabytes in size and is downloaded incrementally over several days or weeks, depending on the speed of your CPU and internet connection. Bitcoin Cash Node will not be able to process transactions or update account balances until the full blockchain dataset is downloaded. Make sure you have enough disk space, bandwidth, and time to complete the initial synchronization. You can configure Bitcoin Cash Node to reduce the size of the blockchain by discarding old blocks (see <<constrained_resources>>), but it will still download the entire dataset before discarding data.
====

Despite these resource requirements, thousands of volunteers run Bitcoin nodes. Some are running on systems as simple as a Raspberry Pi (a $35 USD computer the size of a pack of cards). Many volunteers also run Bitcoin nodes on rented servers, usually some variant of Linux. A _Virtual Private Server_ (VPS) or _Cloud Computing Server_ instance can be used to run a Bitcoin node. Such servers can be rented for $25 to $50 USD per month from a variety of providers.

Why would you want to run a node? Here are some of the most common reasons:

* If you are developing bitcoin software and need to rely on a Bitcoin node for programmable (API) access to the network and blockchain.

* If you are building applications that must validate transactions according to bitcoin's consensus rules. Typically, bitcoin software companies run several nodes.

* If you want to support bitcoin. Running a node makes the network more robust and able to serve more wallets, more users, and more transactions.

* If you do not want to rely on any third party to process or validate your transactions.

If you're reading this book and interested in developing bitcoin software, you should be running your own node.

==== Configuring the Bitcoin Cash Node

((("Bitcoin Cash Node", "running core nodes", "configuring")))((("warnings and cautions", "password creation")))((("passwords", "creating")))((("security", "passwords")))Bitcoin Cash Node will look for a configuration file in its data directory on every start. In this section we will examine the various configuration options and set up a configuration file. To locate the configuration file, run +bitcoind -printtoconsole+ in your terminal and look for the first couple of lines.

----
$ bitcoind -printtoconsole
2023-07-09T11:38:33Z Bitcoin Cash Node version v26.1.0-44591e2a2 (release build)
2023-07-09T11:38:33Z Checkpoints will be verified.
2023-07-09T11:38:33Z New block headers below finalized block (maxreorgdepth=10) will be rejected.
2023-07-09T11:38:33Z Nodes sending headers below finalized block will be penalized with DoS score 100.
2023-07-09T11:38:33Z Assuming ancestors of block 000000000000000003a7669e4401eeaa204becf0f6702e73b488646ceb17de1a have valid signatures.
2023-07-09T11:38:33Z Setting nMinimumChainWork=000000000000000000000000000000000000000001ba459ca1852b2acb2ac172
2023-07-09T11:38:33Z Using the 'sse4(1way),sse41(4way),avx2(8way)' SHA256 implementation
2023-07-09T11:38:33Z Using RdSeed as additional entropy source
2023-07-09T11:38:33Z Using RdRand as an additional entropy source
2023-07-09T11:38:33Z Default data directory /home/gatmac/.bitcoin
2023-07-09T11:38:33Z Using data directory /home/gatmac/.bitcoin
2023-07-09T11:38:33Z Config file: /home/gatmac/.bitcoin/bitcoin.conf (not found, skipping)
...
[a lot more debug output]
...
----

You can hit Ctrl-C to shut down the node once you determine the location of the config file. Usually the configuration file is inside the _.bitcoin_ data directory under your user's home directory. It is not created automatically, but you can create a starter config file by copying and pasting from the <<#full_index_node>> example, below. You can create or modify the configuration file in your preferred editor.

Bitcoin Cash Node offers more than 100 configuration options that modify the behavior of the network node, the storage of the blockchain, and many other aspects of its operation. To see a listing of these options, run +bitcoind  --help+:

----
$ bitcoind --help
Bitcoin Cash Node Daemon version v26.1.0-44591e2a2

Usage:  bitcoind [options]                     Start Bitcoin Cash Node Daemon

Options:

  -?, -h, -help
       Print this help message and exit

  -??, -hh, -help-debug
       Print this help message including advanced debugging options and exit
...
[many more options]
...

  -rpcthreads=<n>
       Set the number of threads to service RPC calls (default: 4)
[...]
----

((("configuration options", seealso="Bitcoin Cash Node")))Here are some of the most important options that you can set in the configuration file, or as command-line parameters to +bitcoind+:

alertnotify:: Run a specified command or script to send emergency alerts to the owner of this node, usually by email.

conf:: An alternative location for the configuration file. This only makes sense as a command-line parameter to +bitcoind+, as it can't be inside the configuration file it refers to.

datadir:: Select the directory and filesystem in which to put all the blockchain data. By default this is the _.bitcoin_ subdirectory of your home directory. Make sure this filesystem has several gigabytes of free space.

prune:: Reduce the disk space requirements to this many megabytes, by deleting old blocks. Use this on a resource-constrained node that can't fit the full blockchain.

txindex:: Maintain an index of all transactions. This means a complete copy of the blockchain that allows you to programmatically retrieve any transaction by ID.

maxconnections:: Set the maximum number of nodes from which to accept connections. Reducing this from the default will reduce your bandwidth consumption. Use if you have a data cap or pay by the gigabyte.

maxmempool:: Limit the transaction memory pool to this many megabytes. Use it to reduce memory use on memory-constrained nodes.

maxreceivebuffer/maxsendbuffer:: Limit per-connection memory buffer to this many multiples of 1000 bytes. Use on memory-constrained nodes.

[[txindex]]
.Transaction Database Index and txindex Option
****
((("Bitcoin Cash Node", "running core nodes", "database options")))((("transactions", "database configuration options")))((("txindex option")))((("full indexing option")))By default, Bitcoin Cash Node builds a database containing _only_ the transactions related to the user's wallet. If you want to be able to access _any_ transaction with commands like +getrawtransaction+ (see <<exploring_and_decoding_transanctions>>), you need to configure Bitcoin Cash Node to build a complete transaction index, which can be achieved with the +txindex+ option. Set +txindex=1+ in the Bitcoin Cash Node configuration file. If you don't set this option at first and later set it to full indexing, you need to restart +bitcoind+ with the +-reindex+ option and wait for it to rebuild the index. Enabling the full transaction index will increase the total disk space requirement by approximately ten percent.
****

<<full_index_node>> shows how you might combine the preceding options, with a fully indexed node, running as an API backend for a bitcoin application.

[[full_index_node]]
.Sample configuration of a full-index node
====
----
alertnotify=myemailscript.sh "Alert: %s"
datadir=/lotsofspace/bitcoin
txindex=1
----
====

<<constrained_resources>> shows a resource-constrained node running on a smaller server.

[[constrained_resources]]
.Sample configuration of a resource-constrained system
====
----
alertnotify=myemailscript.sh "Alert: %s"
maxconnections=15
prune=5000
dbcache=150
maxmempool=150
maxreceivebuffer=2500
maxsendbuffer=500
----
====

Once you've edited the configuration file and set the options that best represent your needs, you can test +bitcoind+ with this configuration. Run Bitcoin Cash Node with the option +printtoconsole+ to run in the foreground with output to the console:

----
$ bitcoind -printtoconsole

Bitcoin version v0.15.0
InitParameterInteraction: parameter interaction: -whitelistforcerelay=1 -> setting -whitelistrelay=1
Assuming ancestors of block 0000000000000000003b9ce759c2a087d52abc4266f8f4ebd6d768b89defa50a have valid signatures.
Using the 'standard' SHA256 implementation
Default data directory /home/ubuntu/.bitcoin
Using data directory /lotsofspace/.bitcoin
Using config file /home/ubuntu/.bitcoin/bitcoin.conf
Using at most 125 automatic connections (1048576 file descriptors available)
Using 16 MiB out of 32/2 requested for signature cache, able to store 524288 elements
Using 16 MiB out of 32/2 requested for script execution cache, able to store 524288 elements
Using 2 threads for script verification
HTTP: creating work queue of depth 16
No rpcpassword set - using random cookie authentication
Generated RPC authentication cookie /lotsofspace/.bitcoin/.cookie
HTTP: starting 4 worker threads
init message: Verifying wallet(s)...
Using BerkeleyDB version Berkeley DB 4.8.30: (April  9, 2010)
Using wallet wallet.dat
CDBEnv::Open: LogDir=/lotsofspace/.bitcoin/database ErrorFile=/lotsofspace/.bitcoin/db.log
scheduler thread start
Cache configuration:
* Using 250.0MiB for block index database
* Using 8.0MiB for chain state database
* Using 1742.0MiB for in-memory UTXO set (plus up to 286.1MiB of unused mempool space)
init message: Loading block index...
Opening LevelDB in /lotsofspace/.bitcoin/blocks/index
Opened LevelDB successfully

[... more startup messages ...]
----

You can hit Ctrl-C to interrupt the process once you are satisfied that it is loading the correct settings and running as you expect.

To run Bitcoin Cash Node in the background as a process, start it with the +daemon+ option, as +bitcoind -daemon+.

To monitor the progress and runtime status of your Bitcoin node, use the command +bitcoin-cli getblockchaininfo+:

----
$ bitcoin-cli getblockchaininfo
----

[source,json]
----
 bitcoin-cli getblockchaininfo
{
  "chain": "main",
  "blocks": 801067,
  "headers": 801067,
  "bestblockhash": "00000000000000000272dd44552cb2a14170e9f1def75f779e6c106e43d2b810",
  "difficulty": 437381981403.382,
  "mediantime": 1688934139,
  "verificationprogress": 0.9999998740142269,
  "initialblockdownload": false,
  "chainwork": "000000000000000000000000000000000000000001c1d12c443527465633af41",
  "size_on_disk": 215741327333,
  "pruned": false,
  [...]
}

----

This shows a node with a blockchain height of 801067 blocks and 801067 headers. The node first fetches the block headers of the best chain and afterward continues to download the full blocks.

Once you are happy with the configuration options you have selected, you should add bitcoin to the startup scripts in your operating system, so that it runs continuously and restarts when the operating system restarts. You will find a number of example startup scripts for various operating systems in bitcoin's source directory under _contrib/init_ and a _README.md_ file showing which system uses which script.((("", startref="BCnode03")))((("", startref="BNcore03")))

=== Bitcoin Cash Node Application Programming Interface (API)

((("Bitcoin Cash Node", "Bitcoin Cash Node API", id="BCapi03")))The Bitcoin Cash Node client implements a JSON-RPC interface that can also be accessed using the command-line helper +bitcoin-cli+. The command line allows us to experiment interactively with the capabilities that are also available programmatically via the API. ((("Bitcoin Cash Node", "Bitcoin Cash Node API", "RPC commands")))To start, invoke the +help+ command to see a list of the available bitcoin RPC commands:

[[bitcoind_commands]]

----
$ bitcoin-cli help
addmultisigaddress nrequired ["key",...] ( "account" )
addnode "node" "add|remove|onetry"
backupwallet "destination"
createmultisig nrequired ["key",...]
createrawtransaction [{"txid":"id","vout":n},...] {"address":amount,...}
decoderawtransaction "hexstring"
...
...
verifymessage "bitcoinaddress" "signature" "message"
walletlock
walletpassphrase "passphrase" timeout
walletpassphrasechange "oldpassphrase" "newpassphrase"
----

Each of these commands may take a number of parameters. To get additional help, a detailed description, and information on the parameters, add the command name after +help+. For example, to see help on the +getblockhash+ RPC command:

----
$ bitcoin-cli help getblockhash
getblockhash height

Returns hash of block in best-block-chain at height provided.

Arguments:
1. height         (numeric, required) The height index

Result:
"hash"         (string) The block hash

Examples:
> bitcoin-cli getblockhash 1000
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockhash", "params": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
----

At the end of the help information you will see two examples of the RPC command, using the +bitcoin-cli+ helper or the HTTP client +curl+. These examples demonstrate how you might call the command. Copy the first example and see the result:

----
$ bitcoin-cli getblockhash 1000
00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09
----

The result is a block hash, which is described in more detail in the following chapters. But for now, this command should return the same result on your system, demonstrating that your Bitcoin Cash Node node is running, is accepting commands, and has information about block 1000 to return to you.

In the next sections we will demonstrate some very useful RPC commands and their expected output.

==== Getting Information on the Bitcoin Cash Node Client Status

((("Bitcoin Cash Node", "Bitcoin Cash Node API", "status information")))Bitcoin Cash Node provides status reports on different modules through the JSON-RPC interface. The most important commands include +getblockchaininfo+, +getmempoolinfo+, +getnetworkinfo+ and +getwalletinfo+.

Bitcoin's +getblockchaininfo+ RPC command was introduced earlier. The +getnetworkinfo+ command displays basic information about the status of the Bitcoin network node. Use +bitcoin-cli+ to run it:

----
$ bitcoin-cli getnetworkinfo
----
[source,json]
----
{
  "version": 26010000,
  "subversion": "/Bitcoin Cash Node:26.1.0(EB32.0)/",
  "protocolversion": 70016,
  "localservices": "0000000000000425",
  "localrelay": true,
  "timeoffset": 0,
  "networkactive": true,
  "connections": 8,
  "networks": [
    ...
    detailed information about all networks (ipv4, ipv6 or onion)
    ...
  ],
  "relayfee": 0.00001000,
  "excessutxocharge": 0.00000000,
  "localaddresses": [
  ],
  "warnings": "This is a pre-release test build - use at your own risk - do not use for mining or merchant applications"
}
}

----

The data is returned in JavaScript Object Notation (JSON), a format that can easily be "consumed" by all programming languages but is also quite human-readable. Among this data we see the version numbers for the bitcoin software client (150000) and Bitcoin protocol (70015).  We see the current number of connections (8) and various information about the Bitcoin network and the settings related to this client.

[TIP]
====
It will take some time, perhaps more than a day, for the +bitcoind+ client to "catch up" to the current blockchain height as it downloads blocks from other Bitcoin clients. You can check its progress using +getblockchaininfo+ to see the number of known blocks.
====

[[exploring_and_decoding_transanctions]]
==== Exploring and Decoding Transactions

((("Bitcoin Cash Node", "Bitcoin Cash Node API", "exploring and decoding transactions")))((("transactions", "exploring with Bitcoin Cash Node API")))Commands: +getrawtransaction+, +decoderawtransaction+



In <<cup_of_coffee>>, ((("use cases", "buying coffee", id="alicethree")))Aya bought a cup of coffee from Boku's Cafe. Her transaction was recorded on the blockchain with transaction ID (+txid+) +d9de82eb8d5a325d84520b949cf55789a88066f355f1501bd0e6626549738f93+. Let's use the API to retrieve and examine that transaction by passing the transaction ID as a parameter:

++++
<pre data-type="programlisting">
$ bitcoin-cli getrawtransaction d9de82eb8d5a325d84520b949cf55789a88066f355f1501bd0e6626549738f93
0200000001125b870be13b318de8932a4e11270278100a62ad8c13033c8d281091f05f81310000000064410aadc5b0767b40020027ee166bcf5ac730f0014af65df34f9028c8c5a8205e5e9e4b4ab58c0e61c304ce454554770ca93f1cf613dc1ed118faee50300aa8ae494121038a6da85d98dd986d6c52c9b81900730957bf3f9c3289e6ee9ce77b3238482675000000000242450e00000000001976a9147b10d9839c297c390154e2d387b77025e898f4e188ac63508a00000000001976a914efc004543b28f78cff1664ea269efb26d5198b8b88ac00000000
</pre>
++++


[TIP]
====
((("transaction IDs (txd)")))((("malleability")))A transaction ID is not authoritative until a transaction has been confirmed. Absence of a transaction hash in the blockchain does not mean the transaction was not processed. This is known as "transaction malleability," because transaction hashes can be modified prior to confirmation in a block. After confirmation, the +txid+ is immutable and authoritative.
====

The command +getrawtransaction+ returns a serialized transaction in hexadecimal notation. To decode that, we use the +decoderawtransaction+ command, passing the hex data as a parameter. You can copy the hex returned by +getrawtransaction+ and paste it as a parameter to +decoderawtransaction+:

++++
<pre data-type="programlisting">
$ bitcoin-cli decoderawtransaction 0200000001125b870be13b318de8932a4e11270278100a62ad8c13033c8d281091f05f81310000000064410aadc5b0767b40020027ee166bcf5ac730f0014af65df34f9028c8c5a8205e5e9e4b4ab58c0e61c304ce454554770ca93f1cf613dc1ed118faee50300aa8ae494121038a6da85d98dd986d6c52c9b81900730957bf3f9c3289e6ee9ce77b3238482675000000000242450e00000000001976a9147b10d9839c297c390154e2d387b77025e898f4e188ac63508a00000000001976a914efc004543b28f78cff1664ea269efb26d5198b8b88ac000000
</pre>
++++

++++
<pre data-type="programlisting" data-code-language="json">
{
  "txid": "d9de82eb8d5a325d84520b949cf55789a88066f355f1501bd0e6626549738f93",
  "hash": "d9de82eb8d5a325d84520b949cf55789a88066f355f1501bd0e6626549738f93",
  "version": 2,
  "size": 219,
  "locktime": 0,
  "vin": [
    {
      "txid": "31815ff09110288d3c03138cad620a10780227114e2a93e88d313be10b875b12",
      "vout": 0,
      "scriptSig": {
        "asm": "0aadc5b0767b40020027ee166bcf5ac730f0014af65df34f9028c8c5a8205e5e9e4b4ab58c0e61c304ce454554770ca93f1cf613dc1ed118faee50300aa8ae49[ALL|FORKID] 038a6da85d98dd986d6c52c9b81900730957bf3f9c3289e6ee9ce77b3238482675",
        "hex": "410aadc5b0767b40020027ee166bcf5ac730f0014af65df34f9028c8c5a8205e5e9e4b4ab58c0e61c304ce454554770ca93f1cf613dc1ed118faee50300aa8ae494121038a6da85d98dd986d6c52c9b81900730957bf3f9c3289e6ee9ce77b3238482675"
      },
      "sequence": 0
    }
  ],
  "vout": [
    {
      "value": 0.00935234,
      "n": 0,
      "scriptPubKey": {
        "asm": "OP_DUP OP_HASH160 7b10d9839c297c390154e2d387b77025e898f4e1 OP_EQUALVERIFY OP_CHECKSIG",
        "hex": "76a9147b10d9839c297c390154e2d387b77025e898f4e188ac",
        "reqSigs": 1,
        "type": "pubkeyhash",
        "addresses": [
          "bitcoincash:qpa3pkvrns5hcwgp2n3d8pahwqj73x85uy5huzkzmn"
        ]
      }
    },
    {
      "value": 0.09064547,
      "n": 1,
      "scriptPubKey": {
        "asm": "OP_DUP OP_HASH160 efc004543b28f78cff1664ea269efb26d5198b8b OP_EQUALVERIFY OP_CHECKSIG",
        "hex": "76a914efc004543b28f78cff1664ea269efb26d5198b8b88ac",
        "reqSigs": 1,
        "type": "pubkeyhash",
        "addresses": [
          "bitcoincash:qrhuqpz58v500r8lzejw5f57lvnd2xvt3vv4ju6vzy"
        ]
      }
    }
  ]
}
</pre>
++++

The transaction decode shows all the components of this transaction, including the transaction inputs and outputs. In this case we see that the transaction used one input and generated two outputs. The input to this transaction was the output from a previously confirmed transaction (shown as the vin +txid+ starting with +31815ff09+). The two outputs correspond to the 0.00935234 credit and an output with change back to the sender.

We can further explore the blockchain by examining the previous transaction referenced by its +txid+ in this transaction using the same commands (e.g., +getrawtransaction+). Jumping from transaction to transaction we can follow a chain of transactions back as the coins are transmitted from owner address to owner address.



==== Exploring Blocks

((("Bitcoin Cash Node", "Bitcoin Cash Node API", "exploring blocks")))((("blocks", "exploring with Bitcoin Cash Node API")))Commands: +getblock+, +getblockhash+

((("blocks", "block height")))((("blocks", "block hash")))Exploring blocks is similar to exploring transactions. However, blocks can be referenced either by the block _height_ or by the block _hash_. First, let's find a block by its height. In <<cup_of_coffee>>, we saw that Aya's transaction was included in block 799,880.

We use the +getblockhash+ command, which takes the block height as the parameter and returns the block hash for that block:

++++
<pre data-type="programlisting">
$ bitcoin-cli getblockhash 799880
000000000000000001d6dbc5d2e05d820b2f0da74a2492fef648d85dda1661d3
</pre>
++++

Now that we know which block Aya's transaction was included in, we can query that block. We use the +getblock+ command with the block hash as the parameter:

++++
<pre data-type="programlisting">
$ bitcoin-cli getblock 000000000000000001d6dbc5d2e05d820b2f0da74a2492fef648d85dda1661d3
</pre>
++++

++++
<pre data-type="programlisting" data-code-language="json">
{
  "hash": "000000000000000001d6dbc5d2e05d820b2f0da74a2492fef648d85dda1661d3",
  "confirmations": 1273,
  "size": 113844,
  "height": 799880,
  "version": 739360768,
  "versionHex": "2c11c000",
  "merkleroot": "e971fbf6684a74ad08ab789777e5423e3e9b5297bd5d097acb132d9c6e5408ba",
  "tx": [
    "61bea6e1dea8ba0041161890e6365d1b120680879521e630036ca367c055faba",
    "019a9a3167ac6433abbace53be665ac3e783ec2ea0cf8936ec4909f482ae82e5",
    "04a23a636a807917da8eee9719669a2e63124bfe1d3d0c5ffc849c5e182fe558",
    "04ea2f68ee79e997a55b63fbd374f779c386d8144ff9f08833b0911c55bb3899",
    "05187f7ab52e3de16af202fc7484b7ecae17a07c2d8b8244a98429ccbd4fada5",
["... Dozens of transactions skipped..."],
    "d9de82eb8d5a325d84520b949cf55789a88066f355f1501bd0e6626549738f93",
    "dace19a8c321a3000ce90e08875595f58a9f97024b58c58ec779efebcf136e95",
    "db15963b0f650587300f0e1310bf952e52dbf00e9908f5c7a0cc79c5ae56a1b2",
    "dc5a0fa1d2beffbb7bd8654b118f15c569989cb9961ca2cbc927f148f4baa40b",
    "dd0f39cd5bd889a95e3e0befffe898959c76a7b7a1f680cd4c9539d10e3137e1",
    "ddd91962fb223eb6761f0c83d9b7abed4e15e06c863bb3676df414875f6fa4d6",
    "de4041a1e22f87ec2d91492882cd1de3a6db0c2a7fa2b60739496f59f9c385be",
    "de42fd593ad3f0bc69c642fe6559afcde056e066d42e27525d68fb486c1097c6",
    "deeb9e4c1386644b75311f2304cf69da3c345d795aad9600469c2f1e88f9bd93",
    "dfdee6102a85715e73c3e88950bf71e0458c6e54ddcb243493ba538fd870688f",
["... Dozens of transactions skipped..."]
  ],
  "time": 1688205804,
  "mediantime": 1688202291,
  "nonce": 3976919370,
  "bits": "18025249",
  "difficulty": 473628995749.2271,
  "chainwork": "000000000000000000000000000000000000000001bfea2d4451106d4b86781a",
  "nTx": 281,
  "previousblockhash": "00000000000000000020c8ac61df51ef243765753031535855afefdaee11418a",
  "nextblockhash": "000000000000000001b681e7ee1c3ad1c4a5f08735f7a23dc40af65212b5449b"
}
</pre>
++++

The block contains 281 transactions and the transaction (+d9de82eb8...+) is Aya's coffee payment. The +height+ entry tells us this is the 799,880th block in the blockchain. Incidentally, the transacton (+dfdee6102...), the last one listed above, is the transaction that Boku's Cafe made to its vendor, Gopesh. Multiple transactions involving the same outputs to inputs can take place in the same block in Bitcoin Cash thanks to a feature called 0-conf. 

==== Using Bitcoin Cash Node's Programmatic Interface

((("Bitcoin Cash Node", "Bitcoin Cash Node API", "using programmatic interface")))((("programmatic interface", id="progint03")))The +bitcoin-cli+ helper is very useful for exploring the Bitcoin Cash Node API and testing functions. But the whole point of an application programming interface is to access functions programmatically. In this section we will demonstrate accessing Bitcoin Cash Node from another program.

Bitcoin Cash Node's API is a JSON-RPC interface. JSON stands for JavaScript Object Notation and it is a very convenient way to present data that both humans and programs can easily read. RPC stands for Remote Procedure Call, which means that we are calling procedures (functions) that are remote (on the Bitcoin Cash Node node) via a network protocol. In this case, the network protocol is HTTP, or HTTPS (for encrypted connections).

When we used the +bitcoin-cli+ command to get help on a command, it showed us an example of using +curl+, the versatile command-line HTTP client to construct one of these JSON-RPC calls:

----
$ cat ~/.bitcoin/.cookie
__cookie__:c47dd3903061...ccb703396edbc9d5b64b
$ curl --user __cookie__ --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockchaininfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
----

This command shows that +curl+ submits an HTTP request to the local host (127.0.0.1), connecting to the default bitcoin port (8332), and submitting a  +jsonrpc+ request for the +getblockchaininfo+ method using +text/plain+ encoding.

You might notice that curl will ask for credentials to be sent along with the request. Bitcoin Cash Node will create a random password on each start and place it in the data directory under the name +.cookie+ along with the default RPC user name. The +bitcoin-cli+ helper can read this password file given the data directory. Similarly, you can copy the password and pass it to curl (or any higher level Bitcoin Cash Node RPC wrappers). Alternatively, you can create a static password in the ~/.bitcoin/bitcoin.conf file using information provided in _./share/examples/bitcoin.conf_ in Bitcoin Cash Node's source directory.

If you're implementing a JSON-RPC call in your own program, you can use a generic HTTP library to construct the call, similar to what is shown in the preceding +curl+ example.

However, there are libraries in most every programming language that "wrap" the Bitcoin Cash Node API in a way that makes this a lot simpler. We will use the +python-bitcoinlib+ library to simplify API access. In our Ubuntu 22.04 LTS environment the library can be installed using: 

----
$ pip3 install python-bitcoinlib
----

Remember, use of this library requires you to have a running Bitcoin Cash Node instance, which will be used to make JSON-RPC calls.

The Python script in <<rpc_example>> makes a simple +getblockchaininfo+ call and prints the +blocks+ parameter from the data returned by Bitcoin Cash Node (full node required).

[[rpc_example]]
.Running getblockchaininfo via Bitcoin Cash Node's JSON-RPC API
====
[source,python]
----
include::code/rpc_example.py[]
----
====

Running it gives us the following result:

----
$ python3 rpc_example.py
829036
----

It tells us that our local Bitcoin Cash Node node has 829036 blocks in its blockchain. Not a spectacular result, but it demonstrates the basic use of the library as a simplified interface to Bitcoin Cash Node's JSON-RPC API.

Next, let's use the +getrawtransaction+ and +decodetransaction+ calls to retrieve the details of Aya's coffee payment. In <<rpc_transaction>>, we retrieve Aya's transaction and list the transaction's outputs. For each output, we show the recipient address and value. As a reminder, Aya's transaction had one output paying Boku's Cafe and one output for change back to Aya.

[[rpc_transaction]]
.Retrieving a transaction and iterating its outputs
====
[source,python]
----
include::code/rpc_transaction.py[]
----
====

Running this code, we get:

----
$ python3 rpc_transaction.py
['bitcoincash:qpa3pkvrns5hcwgp2n3d8pahwqj73x85uy5huzkzmn'] 0.00935234
['bitcoincash:qrhuqpz58v500r8lzejw5f57lvnd2xvt3vv4ju6vzy'] 0.09064547
----

Both of the preceding examples are rather simple. You don't really need a program to run them; you could just as easily use the +bitcoin-cli+ helper. The next example, however, requires several hundred RPC calls and more clearly demonstrates the use of a programmatic interface.

In <<rpc_block>>, we first retrieve block 277316, then retrieve each of the 419 transactions within by reference to each transaction ID. Next, we iterate through each of the transaction's outputs and add up the value.((("", startref="alicethree")))

[[rpc_block]]
.Retrieving a block and adding all the transaction outputs
====
[source,python]
----
include::code/rpc_block.py[]
----
====

Running this code, we get:

----
$ python3 rpc_block.py
Total value in block:  14823.34484432
----

Our example code calculates that the total value transacted in this block is 14,823.34484432 BCH (including mining reward and fees). Compare that to the amount reported by a block explorer site by searching for the block hash or height. Some block explorers report the total value excluding the reward and excluding the fees. See if you can spot the difference.((("", startref="BCapi03")))((("", startref="progint03")))

[[alt_libraries]]
=== Alternative Clients, Libraries, and Toolkits

((("Bitcoin Cash Node", "alternatives to", id="BCalt03")))((("clients, libraries, and toolkits", id="clients03")))((("libraries, clients, and toolkits", id="librar03")))((("toolkits, libraries, and clients", id="toolkit03")))((("third-party API clients", id="thirdpart03")))There are many alternative clients, libraries, toolkits, and even full-node implementations in the bitcoin ecosystem. These are implemented in a variety of programming languages, offering programmers native interfaces in their preferred language.

The tool set for Bitcoin Cash is constantly evolving. For the most up to date list of supporting tools, libraries, and clients please see https://developers.cash[Developers.Cash].

Many more libraries exist in a variety of other programming languages and more are created all the time.((("", startref="BCalt03")))((("", startref="clients03")))((("", startref="thirdpart03")))((("", startref="toolkit03")))((("", startref="librar03")))
